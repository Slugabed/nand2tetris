// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    DMux8Way(in=true,sel=address,a=ad000,b=ad001,c=ad010,d=ad011,e=ad100,f=ad101,g=ad110,h=ad111);
    DMux8Way(in=load,sel=address,a=aad000,b=aad001,c=aad010,d=aad011,e=aad100,f=aad101,g=aad110,h=aad111);
    Register(in=in,load=aad000,out=out000);
    And16(a=out000,b[0]=ad000,b[1]=ad000,b[2]=ad000,b[3]=ad000,b[4]=ad000,b[5]=ad000,b[6]=ad000,b[7]=ad000,b[8]=ad000,b[9]=ad000,b[10]=ad000,b[11]=ad000,b[12]=ad000,b[13]=ad000,b[14]=ad000,b[15]=ad000,out=outF000);And16(a=out001,b[0]=ad001,b[1]=ad001,b[2]=ad001,b[3]=ad001,b[4]=ad001,b[5]=ad001,b[6]=ad001,b[7]=ad001,b[8]=ad001,b[9]=ad001,b[10]=ad001,b[11]=ad001,b[12]=ad001,b[13]=ad001,b[14]=ad001,b[15]=ad001,out=outF001);And16(a=out010,b[0]=ad010,b[1]=ad010,b[2]=ad010,b[3]=ad010,b[4]=ad010,b[5]=ad010,b[6]=ad010,b[7]=ad010,b[8]=ad010,b[9]=ad010,b[10]=ad010,b[11]=ad010,b[12]=ad010,b[13]=ad010,b[14]=ad010,b[15]=ad010,out=outF010);And16(a=out011,b[0]=ad011,b[1]=ad011,b[2]=ad011,b[3]=ad011,b[4]=ad011,b[5]=ad011,b[6]=ad011,b[7]=ad011,b[8]=ad011,b[9]=ad011,b[10]=ad011,b[11]=ad011,b[12]=ad011,b[13]=ad011,b[14]=ad011,b[15]=ad011,out=outF011);And16(a=out100,b[0]=ad100,b[1]=ad100,b[2]=ad100,b[3]=ad100,b[4]=ad100,b[5]=ad100,b[6]=ad100,b[7]=ad100,b[8]=ad100,b[9]=ad100,b[10]=ad100,b[11]=ad100,b[12]=ad100,b[13]=ad100,b[14]=ad100,b[15]=ad100,out=outF100);And16(a=out101,b[0]=ad101,b[1]=ad101,b[2]=ad101,b[3]=ad101,b[4]=ad101,b[5]=ad101,b[6]=ad101,b[7]=ad101,b[8]=ad101,b[9]=ad101,b[10]=ad101,b[11]=ad101,b[12]=ad101,b[13]=ad101,b[14]=ad101,b[15]=ad101,out=outF101);And16(a=out110,b[0]=ad110,b[1]=ad110,b[2]=ad110,b[3]=ad110,b[4]=ad110,b[5]=ad110,b[6]=ad110,b[7]=ad110,b[8]=ad110,b[9]=ad110,b[10]=ad110,b[11]=ad110,b[12]=ad110,b[13]=ad110,b[14]=ad110,b[15]=ad110,out=outF110);And16(a=out111,b[0]=ad111,b[1]=ad111,b[2]=ad111,b[3]=ad111,b[4]=ad111,b[5]=ad111,b[6]=ad111,b[7]=ad111,b[8]=ad111,b[9]=ad111,b[10]=ad111,b[11]=ad111,b[12]=ad111,b[13]=ad111,b[14]=ad111,b[15]=ad111,out=outF111);

    Register(in=in,load=aad001,out=out001);
    Register(in=in,load=aad010,out=out010);
    Register(in=in,load=aad011,out=out011);
    Register(in=in,load=aad100,out=out100);
    Register(in=in,load=aad101,out=out101);
    Register(in=in,load=aad110,out=out110);
    Register(in=in,load=aad111,out=out111);
    Or16(a=outF000,b=outF001,out=outF1);
    Or16(a=outF1,b=outF010,out=outF2);
    Or16(a=outF2,b=outF011,out=outF3);
    Or16(a=outF3,b=outF100,out=outF4);
    Or16(a=outF4,b=outF101,out=outF5);
    Or16(a=outF5,b=outF110,out=outF6);
    Or16(a=outF6,b=outF111,out=out);
    

}